var StarterConfig = {
	JoinChannel: "", // Name of the channel to join
	FirstJoinMessage: "", // Message to say when first joining a channel, usually ".login"
	ChatActionsDelay: 2, // Seconds to wait in lobby before entering a channel
	MinGameTime: 15,

	JoinRetryDelay: 5, // Time in seconds to wait before next join attempt
	SwitchKeyDelay: 5, // Seconds to wait before switching a used/banned key or after realm down

	CrashDelay: 5, // Seconds to wait after a d2 window crash
	RealmDownDelay: 3, // Minutes to wait after getting Realm Down message
	UnableToConnectDelay: 5, // Minutes to wait after Unable To Connect message
	CDKeyInUseDelay: 5, // Minutes to wait before connecting again if CD-Key is in use. SwitchKeys overrides this!
	ConnectingTimeout: 20, // Seconds to wait before cancelling the 'Connecting...' screen
	PleaseWaitTimeout: 30, // Seconds to wait before cancelling the 'Please Wait...' screen
	WaitInLineTimeout: 60, // Seconds to wait before cancelling the 'Waiting in Line...' screen
	GameDoesNotExistTimeout: 30 // Seconds to wait before cancelling the 'Game does not exist.' screen
};

// No touchy!
include("json2.js");
include("NTItemParser.dbl");
include("NTItemAlias.dbl");
include("OOG.js");
include("common/Config.js");
include("common/Loader.js");
include("common/Misc.js");
include("common/Pather.js");
include("common/Attack.js");
include("common/Precast.js");
include("common/Prototypes.js");
include("common/Storage.js");
include("common/Town.js");
include("common/CollMap.js");
include("MuleLogger.js");
include("DropperDB.js");

var i, j, gameInfo, joinInfo, gameStart, ingame, handle,
	firstLogin, chatActionsDone, lastGameTick, connectFail,
	gameCount = DataFile.getStats().runs + 1,
	loginRetry = 0,
	lastGameStatus = "ready",
	leader = "",
	lastGame = [],
	jobAcc = {};

if (!FileTools.exists("data/" + me.profile + ".json")) {
	DataFile.create();
}

function DropItems(count = false) {
	var i, toDrop = [],
		notToDrop = [],
		jobFile = "DropperDB/In/" + me.profile + ".json",
		failedToDrop = 0;
	
	if(FileTools.exists(jobFile)) {
		var jobFilePlain = Misc.fileAction(jobFile, 0);
		if(jobFilePlain.length > 10) {
			var jobLines = jobFilePlain.split("\n");
			for(i = 0; i < jobLines.length; i += 1) {
				if(jobLines[i].length < 10) continue;
				var js = JSON.parse(jobLines[i]);
				if(i === 0) {
					var dd = {
						"hash": js[0],
						"name": js[1],
						"account": js[2],
						"password": js[3],
						"realm": js[4],
						"charName": js[5],
						"gamename": js[6],
						"gamepass": js[7]
					};
					toDrop.push(dd);
					jobAcc = dd;
				} else if(js[2] === toDrop[0]["account"] && js[6] === toDrop[0]["gamename"] && js[5] === toDrop[0]["charname"]){
					var dd = {
						"hash": js[0],
						"name": js[1],
						"account": js[2],
						"password": js[3],
						"realm": js[4],
						"charName": js[5],
						"gamename": js[6],
						"gamepass": js[7],
						"found": false
					};
					toDrop.push(dd);
				} else {
					notToDrop.push(js);
				}
			}
		}
	}
	
	if(count) {
		return toDrop.length;
	} else {
		while (!me.inTown && !me.gameReady) {
			delay(200);
			if (getLocation() !== null) {
				D2Bot.restart();
			}
		}
		delay((me.ping||60) * 2 + 200);
		
		var items;
		while (!items) {
			items = me.findItems();
			if (getLocation() !== null) {
				D2Bot.restart();
			}
			delay(100);
		}
		delay((me.ping||60) * 2 + 200);
		
		var retryC = 0;
		while (!Town.openStash()) {
			delay((me.ping||60) * 2 + 200);
			sendPacket(1, 0x4f, 4, 0x12, 2, 0);
			retryC++;
			if (retryC > 10) D2Bot.restart();
			if (getLocation() !== null) {
				D2Bot.restart();
			}
		}
		delay((me.ping||60) * 2 + 200);
		
		for (i = 0; i < items.length; i++) {
			var ha = md5(items[i].fname + items[i].description + DropperDB.getItemImage(items[i]));
			me.overhead("Items To Drop [" + toDrop.length + "]");
			var torem = -1;
			for (var p = 0; p < toDrop.length; p += 1) {
				if(ha === toDrop[p]["hash"]) {
					torem = p;
					var dropTries = 0;
					while(dropTries != 5) {
						if(items[i].drop()) {
							D2Bot.printToConsole("Dropped Item [" + DropperDB.filterItemName(items[i].fname).replace("\n", " ") + "] Game [" + me.gamename + "//" + me.gamepassword + "]", 5);
							break;
						} else {
							D2Bot.printToConsole("Failed To Drop Item [" + DropperDB.filterItemName(items[i].fname).replace("\n", " ") + "] Game [" + me.gamename + "//" + me.gamepassword + "]", 9);
							failedToDrop += 1;
						}
						dropTries += 1;
					}
					break;
				}
			}
			if(torem != -1) {
				toDrop.splice(torem, 1);
			}
		}
		
		if(failedToDrop > 0) {
			D2Bot.printToConsole("Failed To Drop [" + failedToDrop + "] Items In Game [" + me.gamename + "//" + me.gamepassword + "]", 9);
		} else {
			D2Bot.printToConsole("Dropped All Items In Game [" + me.gamename + "//" + me.gamepassword + "]", 5);
		}
		
		DropperDB.init();
		
		FileTools.remove(jobFile);
		if(notToDrop.length > 0) {
			var tw = "";
			for(var p = 0; p < notToDrop.length; p += 1) {
				tw = tw + notToDrop[p] + "\n";
			}
			var writeTofile = File.open(jobFile, FILE_WRITE, false, true, true);
			writeTofile.write(tw);
			writeTofile.close();
		}
	}
}

function locationTimeout (time, location) {
	var endtime = getTickCount() + time;

	while (!me.ingame && getLocation() === location && endtime > getTickCount()) {
		delay(500);
	}

	return (getLocation() !== location);
}

function updateCount () {
	D2Bot.updateCount();
	delay(1000);
	ControlAction.click(6, 264, 366, 272, 35);

	try {
		login(me.profile);
	} catch (e) {

	}

	delay(1000);
	ControlAction.click(6, 33, 572, 128, 35);
}

function ReceiveCopyData (mode, msg) {
	var obj;

	switch (msg) {
	case "Handle":
		handle = mode;

		break;
	}

	switch (mode) {
	case 2: // Game info
		gameInfo = JSON.parse(msg);

		break;
	case 4:
		// Heartbeat ping
		if (msg === "pingreq") {
			sendCopyData(null, me.windowtitle, 4, "pingrep");
		}

		break;
	}
}

function timer (tick) {
	if (!tick) {
		return "";
	}

	var min, sec;

	min = Math.floor((getTickCount() - tick) / 60000).toString();

	if (min <= 9) {
		min = "0" + min;
	}

	sec = (Math.floor((getTickCount() - tick) / 1000) % 60).toString();

	if (sec <= 9) {
		sec = "0" + sec;
	}

	return " (" + min + ":" + sec + ")";
}

function main () {
	debugLog(me.profile);
	addEventListener('copydata', ReceiveCopyData);

	while (!handle) {
		delay(100);
	}

	DataFile.updateStats("handle", handle);
	D2Bot.init();
	load("tools/heartbeat.js");

	while (!gameInfo) {
		D2Bot.requestGameInfo();
		delay(500);
	}

	if (gameInfo.error) {
		delay(200);

		if (!!DataFile.getStats().debugInfo) {
			gameInfo.crashInfo = DataFile.getStats().debugInfo;

			D2Bot.printToConsole("Crash Info: Script: " + JSON.parse(gameInfo.crashInfo).currScript + " Area: " + JSON.parse(gameInfo.crashInfo).area, 10);
		}

		ControlAction.timeoutDelay("Crash Delay", StarterConfig.CrashDelay * 1e3);
		D2Bot.updateRuns();
	}
	
	DataFile.updateStats("debugInfo", JSON.stringify({currScript: "none", area: "out of game"}));

	while (true) {
		while (me.ingame) {
			if (me.gameReady) {
				if (!ingame) {
					lastGameStatus = "ingame";
					ingame = true;
					gameStart = getTickCount();

					DataFile.updateStats("runs", gameCount);
					
					DropItems();
				}
				
				if ((getTickCount() - me.gamestarttime) > StarterConfig.MinGameTime * 1000) {
					D2Bot.restart();
				}
			}

			delay(1000);
		}

		locationAction();
		delay(1000);
	}
}

function joinCheck (leader) {
	D2Bot.requestGame(leader);
	delay(500);

	if (!joinInfo.inGame || (lastGame.length && lastGame.indexOf(joinInfo.gameName) === -1)) {
		D2Bot.printToConsole("Game is finished. Stopping join delay.");

		return true;
	}

	return false;
}

function locationAction () {
	if (me.ingame) {
		return;
	}

	var i, string, control, text, location;

	location = getLocation();

MainSwitch:
	switch (location) {
	case 0:
		ControlAction.click();

		break;
	case 1:	// Lobby
		D2Bot.updateStatus("Lobby");

		me.blockKeys = false;
		loginRetry = 0;

		if (!firstLogin) {
			firstLogin = true;
		}

		if (StarterConfig.JoinChannel !== "") {
			ControlAction.click(6, 27, 480, 120, 20);

			break;
		}

		if (ingame) {
			if (AutoMule.outOfGameCheck() || TorchSystem.outOfGameCheck() || Gambling.outOfGameCheck() || CraftingSystem.outOfGameCheck()) {
				break;
			}
			D2Bot.updateRuns();

			lastGameTick = getTickCount();
			gameCount += 1;
			lastGameStatus = "ready";
			ingame = false;
		}

		if (!ControlAction.click(6, 652, 469, 120, 20)) { // Join
			break;
		}

		if (!locationTimeout(5000, location)) { // in case join button gets bugged
			if (!ControlAction.click(6, 533, 469, 120, 20)) { // Create
				break;
			}

			if (!ControlAction.click(6, 652, 469, 120, 20)) { // Join
				break;
			}
		}

		break;
	case 2: // Waiting In Line
		D2Bot.updateStatus("Waiting...");
		locationTimeout(StarterConfig.WaitInLineTimeout * 1e3, location);
		ControlAction.click(6, 433, 433, 96, 32);

		break;
	case 3: // Lobby Chat
		D2Bot.updateStatus("Lobby Chat");

		if (ingame) {
			if (AutoMule.outOfGameCheck() || TorchSystem.outOfGameCheck() || Gambling.outOfGameCheck() || CraftingSystem.outOfGameCheck()) {
				break;
			}
			D2Bot.updateRuns();

			lastGameTick = getTickCount();
			gameCount += 1;
			lastGameStatus = "ready";
			ingame = false;
		}

		if (!chatActionsDone) {
			chatActionsDone = true;

			ControlAction.timeoutDelay("Chat delay", StarterConfig.ChatActionsDelay * 1e3);
			say("/j " + StarterConfig.JoinChannel);
			delay(1000);

			if (StarterConfig.FirstJoinMessage !== "") {
				say(StarterConfig.FirstJoinMessage);
				delay(500);
			}
		}

		if (!ControlAction.click(6, 652, 469, 120, 20)) { // Join
			break;
		}

		if (!locationTimeout(5000, location)) { // in case join button gets bugged
			if (!ControlAction.click(6, 533, 469, 120, 20)) { // Create
				break;
			}

			if (!ControlAction.click(6, 652, 469, 120, 20)) { // Join
				break;
			}
		}

		break;
	case 4: // Create Game
		break;
	case 5: // Join Game
		D2Bot.updateStatus("Join Game");
		
		ControlAction.setText(1, 606, 148, 155, 20, jobAcc["gamepass"]);
		ControlAction.setText(1, 432, 148, 155, 20, jobAcc["gamename"]);

		me.blockMouse = true;
		DataFile.updateStats("gameName", jobAcc["gamename"]);
		ControlAction.click(6, 594, 433, 172, 32);
		me.blockMouse = false;
		lastGameStatus = "pending";
		locationTimeout(15000, location);

		break;
	case 6: // Ladder
		break;
	case 7: // Channel List
		break;
	case 8: // Main Menu
	case 9: // Login
	case 18: // D2 Splash
		while(!jobAcc.hasOwnProperty("account") || jobAcc["account"].length < 1) {
			DropItems(true);
			delay(1000);
		}
		
		if (getLocation() === 12 && !getControl(4, 626, 100, 151, 44)) {
			ControlAction.click(6, 33, 572, 128, 35);

			break;
		}

		if (firstLogin && getLocation() === 9) { // multiple realm botting fix in case of R/D or disconnect
			ControlAction.click(6, 33, 572, 128, 35);
		}

		D2Bot.updateStatus("Logging In");

		try {
			ControlAction.loginAccount(jobAcc);
		} catch (e) {}

		break;
	case 12: // Character Select
		if (ControlAction.findCharacter(jobAcc)) {
			ControlAction.loginCharacter(jobAcc);
		}
		break;
	case 10: // Login Error
		string = "";
		text = ControlAction.getText(4, 199, 377, 402, 140);

		if (text) {
			for (i = 0; i < text.length; i += 1) {
				string += text[i];

				if (i !== text.length - 1) {
					string += " ";
				}
			}

			switch (string) {
			case getLocaleString(5207):
				D2Bot.updateStatus("Invalid Password");
				D2Bot.printToConsole("Invalid Password");

				break;
			case getLocaleString(5208):
				D2Bot.updateStatus("Invalid Account");
				D2Bot.printToConsole("Invalid Account");

				break;
			case getLocaleString(5202): // cd key intended for another product
			case getLocaleString(10915): // lod key intended for another product
				D2Bot.updateStatus("Invalid CDKey");
				D2Bot.printToConsole("Invalid CDKey: " + gameInfo.mpq, 6);
				D2Bot.CDKeyDisabled();

				if (gameInfo.switchKeys) {
					ControlAction.timeoutDelay("Key switch delay", StarterConfig.SwitchKeyDelay * 1000);
					D2Bot.restart(true);
				} else {
					D2Bot.stop();
				}

				break;
			case getLocaleString(5199):
				D2Bot.updateStatus("Disabled CDKey");
				D2Bot.printToConsole("Disabled CDKey: " + gameInfo.mpq, 6);
				D2Bot.CDKeyDisabled();

				if (gameInfo.switchKeys) {
					ControlAction.timeoutDelay("Key switch delay", StarterConfig.SwitchKeyDelay * 1000);
					D2Bot.restart(true);
				} else {
					D2Bot.stop();
				}

				break;
			case getLocaleString(10913):
				D2Bot.updateStatus("Disabled LoD CDKey");
				D2Bot.printToConsole("Disabled LoD CDKey: " + gameInfo.mpq, 6);
				D2Bot.CDKeyDisabled();

				if (gameInfo.switchKeys) {
					ControlAction.timeoutDelay("Key switch delay", StarterConfig.SwitchKeyDelay * 1000);
					D2Bot.restart(true);
				} else {
					D2Bot.stop();
				}

				break;
			case getLocaleString(5347):
				D2Bot.updateStatus("Disconnected");
				D2Bot.printToConsole("Disconnected");
				ControlAction.click(6, 335, 412, 128, 35);

				break MainSwitch;
			default:
				D2Bot.updateStatus("Login Error");
				D2Bot.printToConsole("Login Error - " + string);

				if (gameInfo.switchKeys) {
					ControlAction.timeoutDelay("Key switch delay", StarterConfig.SwitchKeyDelay * 1000);
					D2Bot.restart(true);
				} else {
					D2Bot.stop();
				}

				break;
			}
		}

		ControlAction.click(6, 335, 412, 128, 35);

		while (true) {
			delay(1000);
		}

		break;
	case 11: // Unable To Connect
		D2Bot.updateStatus("Unable To Connect");

		if (connectFail) {
			ControlAction.timeoutDelay("Unable to Connect", StarterConfig.UnableToConnectDelay * 6e4);

			connectFail = false;
		} else {
			connectFail = true;
		}

		if (!ControlAction.click(6, 335, 450, 128, 35)) {
			break;
		}

		break;
	case 13: // Realm Down - Character Select screen
		D2Bot.updateStatus("Realm Down");
		delay(1000);

		if (!ControlAction.click(6, 33, 572, 128, 35)) {
			break;
		}

		updateCount();
		ControlAction.timeoutDelay("Realm Down", StarterConfig.RealmDownDelay * 6e4);
		D2Bot.CDKeyRD();

		if (gameInfo.switchKeys && !gameInfo.rdBlocker) {
			D2Bot.printToConsole("Realm Down - Changing CD-Key");
			ControlAction.timeoutDelay("Key switch delay", StarterConfig.SwitchKeyDelay * 1000);
			D2Bot.restart(true);
		} else {
			D2Bot.printToConsole("Realm Down - Restart");
			D2Bot.restart();
		}

		break;
	case 14: // Character Select - Disconnected
		D2Bot.updateStatus("Disconnected");
		delay(500);
		ControlAction.click(6, 351, 337, 96, 32);

		break;
	case 16: // Character Select - Please Wait popup
		if (!locationTimeout(StarterConfig.PleaseWaitTimeout * 1e3, location)) {
			ControlAction.click(6, 351, 337, 96, 32);
		}

		break;
	case 17: // Lobby - Lost Connection - just click okay, since we're toast anyway
		delay(1000);
		ControlAction.click(6, 351, 337, 96, 32);

		break;
	case 19: // Login - Cdkey In Use
		D2Bot.printToConsole(gameInfo.mpq + " is in use by " + ControlAction.getText(4, 158, 310, 485, 40), 6);
		D2Bot.CDKeyInUse();

		if (gameInfo.switchKeys) {
			ControlAction.timeoutDelay("Key switch delay", StarterConfig.SwitchKeyDelay * 1000);
			D2Bot.restart(true);
		} else {
			ControlAction.timeoutDelay("CD-Key in use", StarterConfig.CDKeyInUseDelay * 6e4);
			ControlAction.click(6, 335, 450, 128, 35);
		}

		break;
	case 20: // Single Player - Select Difficulty
		break;
	case 21: // Main Menu - Connecting
		if (!locationTimeout(StarterConfig.ConnectingTimeout * 1e3, location)) {
			ControlAction.click(6, 330, 416, 128, 35);
		}

		break;
	case 22: // Login - Invalid Cdkey (classic or xpac)
		text = ControlAction.getText(4, 162, 270, 477, 50);
		string = "";

		if (text) {
			for (i = 0; i < text.length; i += 1) {
				string += text[i];

				if (i !== text.length - 1) {
					string += " ";
				}
			}
		}

		switch (string) {
		case getLocaleString(10914):
			D2Bot.printToConsole(gameInfo.mpq + " LoD key in use by " + ControlAction.getText(4, 158, 310, 485, 40), 6);
			D2Bot.CDKeyInUse();

			if (gameInfo.switchKeys) {
				ControlAction.timeoutDelay("Key switch delay", StarterConfig.SwitchKeyDelay * 1000);
				D2Bot.restart(true);
			} else {
				ControlAction.click(6, 335, 450, 128, 35);
				ControlAction.timeoutDelay("LoD key in use", StarterConfig.CDKeyInUseDelay * 6e4);
			}

			break;
		default:
			if (gameInfo.switchKeys) {
				D2Bot.printToConsole("Invalid CD-Key");
				ControlAction.timeoutDelay("Key switch delay", StarterConfig.SwitchKeyDelay * 1000);
				D2Bot.restart(true);
			} else {
				ControlAction.click(6, 335, 450, 128, 35);
				ControlAction.timeoutDelay("Invalid CD-Key", StarterConfig.CDKeyInUseDelay * 6e4);
			}

			break;
		}

		break;
	case 23: // Character Select - Connecting
	case 42: // Empty character screen
		string = "";
		text = ControlAction.getText(4, 45, 318, 531, 140);

		if (text) {
			for (i = 0; i < text.length; i += 1) {
				string += text[i];

				if (i !== text.length - 1) {
					string += " ";
				}
			}

			if (string === getLocaleString(11161)) { // CDKey disabled from realm play
				D2Bot.updateStatus("Realm Disabled CDKey");
				D2Bot.printToConsole("Realm Disabled CDKey: " + gameInfo.mpq, 6);
				D2Bot.CDKeyDisabled();

				if (gameInfo.switchKeys) {
					ControlAction.timeoutDelay("Key switch delay", StarterConfig.SwitchKeyDelay * 1000);
					D2Bot.restart(true);
				} else {
					D2Bot.stop();
				}
			}
		}

		if (!locationTimeout(StarterConfig.ConnectingTimeout * 1e3, location)) {
			ControlAction.click(6, 33, 572, 128, 35);

			if (gameInfo.rdBlocker) {
				D2Bot.restart();
			}
		}

		break;
	case 24: // Server Down - not much to do but wait..
		break;
	case 25: // Lobby - Please Wait
		if (!locationTimeout(StarterConfig.PleaseWaitTimeout * 1e3, location)) {
			ControlAction.click(6, 351, 337, 96, 32);
		}

		break;
	case 26: // Lobby - Game Name Exists
		break;
	case 27: // Gateway Select
		ControlAction.click(6, 436, 538, 96, 32);

		break;
	case 28: // Lobby - Game Does Not Exist
		D2Bot.printToConsole("Game doesn't exist");

		if (gameInfo.rdBlocker) {
			D2Bot.printToConsole(gameInfo.mpq + " is probably flagged.", 6);

			if (gameInfo.switchKeys) {
				ControlAction.timeoutDelay("Key switch delay", StarterConfig.SwitchKeyDelay * 1000);
				D2Bot.restart(true);
			}
		} else {
			locationTimeout(StarterConfig.GameDoesNotExistTimeout * 1e3, location);
		}

		lastGameStatus = "ready";

		break;
	case 38: // Game is full
		D2Bot.printToConsole("Game is full");
		ControlAction.click(6, 652, 469, 120, 20);
		lastGame.push(joinInfo.gameName);

		lastGameStatus = "ready";

		break;
	default:
		if (location !== undefined) {
			D2Bot.printToConsole("Unhandled location " + location);
			//takeScreenshot();
			delay(500);
			D2Bot.restart();
		}

		break;
	}
}
